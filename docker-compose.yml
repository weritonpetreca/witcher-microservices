services:

  postgres:
    image: postgres:13
    container_name: witcher-postgres
    environment:
      POSTGRES_DB: witcher_db # O banco de dados a ser criado
      POSTGRES_USER: ${POSTGRES_USER} # Pega o valor do arquivo .env
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # Pega o valor do arquivo .env
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    # Garante que o serviço só seja considerado "saudável" quando o banco estiver pronto
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d witcher_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - witcher-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    # Adiciona um healthcheck para garantir que o Zookeeper esteja pronto
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - witcher-net

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy # AGORA ESPERA O ZOOKEEPER FICAR SAUDÁVEL
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    # Garante que o Kafka esteja pronto para aceitar conexões antes que outros serviços iniciem
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 15s
      timeout: 10s
      retries: 10
    networks:
      - witcher-net

  eureka-server:
    build: ./service-discovery
    container_name: eureka-server
    restart: unless-stopped
    ports:
      - "8761:8761"
    networks:
      - witcher-net
    # Garante que o Eureka esteja pronto para registrar serviços
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
        
  bestiary-and-armory:
    build: ./bestiary-and-armory-service
    container_name: bestiary-and-armory-app
    restart: unless-stopped
    ports:
      - "8100:8100"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/witcher_db
      # Adiciona as credenciais que estavam faltando
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy # Espera o healthcheck do postgres passar
      eureka-server:
        condition: service_healthy # AGORA ESPERA O EUREKA FICAR SAUDÁVEL
    networks:
      - witcher-net

  witcher-contracts:
    build: ./witcher-contracts-service
    container_name: witcher-contracts-app
    ports:
      - "8200:8200"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka # Onde encontrar o Eureka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092 # Conecta ao listener INTERNO do Kafka, que é a melhor prática
    depends_on:
      kafka:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - witcher-net


volumes:
  postgres-data:

# Define a rede compartilhada
networks:
  witcher-net:
    driver: bridge